name: CMake
on:
  push:
    branches: [ master ]
env:
  BUILD_TYPE: Release
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    steps:
    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main

    - name: Conan version
      run: echo "${{ steps.conan.outputs.version }}"
    
    - name: Update conan profile
      run: conan profile detect

    - uses: actions/checkout@v2

    - name: Install Dependencies
      run: cd cpp-lib
      run: conan install . -of ${{github.workspace}}/build -s build_type=${{env.BUILD_TYPE}}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cd cpp-lib
      run: cmake -G "Visual Studio 17 2022" -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTING=OFF -DBUILD_SHARED_LIB=true
    - name: Build
      # Build your program with the given configuration
      run: cd cpp-lib
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target pitaya_cpp

#TODO: fix tests
#    - name: Test
#      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest -C ${{env.BUILD_TYPE}}