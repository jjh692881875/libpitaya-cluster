name: Build Platform Specific Native Libs
on:
  push:
    branches: [ master ]
env:
  BUILD_TYPE: Release
jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            preset: npitaya-default
            cmake_path: build/_builds
          - os: ubuntu-latest
            preset: npitaya-release
            cmake_path: build/_builds/Release
          - os: macos-latest
            preset: npitaya-release
            cmake_path: build/_builds/Release
    runs-on: ${{ matrix.os }}
    steps:
    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main
    
    - name: Update conan profile
      run: conan profile detect

    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Using the builtin GitHub Cache Action for .conan
      id: cache-conan-restore
      uses: actions/cache/restore@v3
      env:
        cache-name: cache-conan-modules
      with:
        path: ~/.conan2/
        key: ${{ runner.os }}-builder-${{ env.cache-name }}-${{ hashFiles('cpp-lib/conanfile.py') }}
        restore-keys: ${{ runner.os }}-builder-${{ env.cache-name }}-

    - name: Install Dependencies
      run: conan install . -of build -s build_type=${{env.BUILD_TYPE}} --build=missing
      working-directory: cpp-lib
    
    - name: Configure CMake
      run: cmake --preset ${{matrix.preset}} -DBUILD_TESTING=OFF
      working-directory: cpp-lib

    - name: Build
      run: cmake --build ${{matrix.cmake_path}} --config ${{env.BUILD_TYPE}} --target pitaya_cpp
      working-directory: cpp-lib

    - uses: actions/cache/save@v3
      if: always()
      env:
        cache-name: cache-conan-modules
      with:
        path: ~/.conan2/
        key: ${{ runner.os }}-builder-${{ env.cache-name }}-${{ hashFiles('cpp-lib/conanfile.py') }}

    - uses: actions/upload-artifact@v3
      with:
        name: prebuilt-libs-${{ matrix.os }}
        path: |
          cpp-lib/build/**/*pitaya_cpp.dll
          cpp-lib/build/**/*pitaya_cpp.so
          cpp-lib/build/**/*pitaya_cpp.dylib
          cpp-lib/build/**/*pitaya_cpp.bundle